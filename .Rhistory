q()
0.05263158^2
0.05263158^3
((1/2) * (2/3))/(2/3)
(1/6)/(1/2)
(1/2)/(2/3)
100^3
(100^3)/150000
(100^3)
(100^3)/3
(100^3)/3 * (1/5000)
(100^3)/15000
(1/21)^21
1-(20/21)^21
(0.06 * 0.4)/0.05
0.70 + 0.002 * 800
0.70 + 0.002 * 1600
0.70 + 0.002 * 1400
0.70 + 0.002 * 1100
0.70 + 0.002 * 200
0.70 + 0.002 * 1600
466.4/sqrt(900)
-32.8/(466.4/sqrt(900))
log(0.0013)
log(0.0009)
?log
log10(0.0013)
log(0.4)
log(0.6)
log(0.4) + log(0.0013)
worker = [1:15]
worker = seq(from = 1, to = 15)
worker
wage_before = c(8.30, 9.40, 9.00, 10.50, 11.40, 8.75, 10, 9.5, 10.8, 12.55, 12, 8.65, 7.75, 11.25, 12.65)
wage_after = c(9.25, 9, 9.25, 10, 12, 9.5, 10.25, 9.5, 11.5, 13.10, 11.5, 9, 7.75, 11.5, 13)
data = data.frame(worker, wage_before, wage_after)
data
data$change = data$wage_after - data$wage_before
data
?t.test
t.test(data$change, alternative = "greater", mu = 0)
var(data$change)/(sqrt(15))
mean(data$change)/(var(data$change)/sqrt(15))
write.table(x = data, file = "problem4.csv")
pwd()
getwd()
(1/4) * 600
/600
150/600
(1/4)^600
1/2400
.25*600
/359
data <- read.csv("~/Documents/problem4.csv", sep="")
View(data)
mean(data$change)
sd(data$change)
mean(data$change)/(sd(data$change)/sqrt(15))
?sd
?t.test
t.test(data$change, alternative = "greater")
1-.9803
.25/600
1/2400
x = 1.96 * (1/2400)
x + .5
x = 1.96 * sqrt((1/2400))
x + .5
y = -1.96 * sqrt((1/2400))
y + .5
se = sqrt(1/2400)/sqrt(600)
x = 1.96 * se + 0.5
y = -1.96 * se + 0.5
se = sqrt(1/2400)
1.96 * se + 0.5
-1.96 * se + 0.5
382/600
0.5/(sqrt(1/2400)/sqrt(600))
sqrt(1/2400)/sqrt(600)
mean(data$change)
problem4 <- read.csv("~/Documents/problem4.csv", sep="")
View(problem4)
mean(data$change)
mean(problem4$change)
1/(9/4)
4/9
2^6
2^64
2^8
x = (1/2400)/sqrt(600)
1.96 * x + 0.5
-1.96 * x + 0.5
1.96 * (sqrt(.25)/sqrt(600)) - 0.5
-1.96 * (sqrt(.25)/sqrt(600)) - 0.5
1.96 * sqrt(1/2400) - 0.5
1.96 * (sqrt(.25)/sqrt(600)) + 0.5
1.96 * (sqrt(.25)/sqrt(600)) - 0.5
-1.96 * (sqrt(.25)/sqrt(600)) + 0.5
1.96 * (sqrt(.25)/sqrt(600)) + 0.5
-1.96 * (sqrt(.25)/sqrt(600)) + 0.5
x = 600 * .25
1.96 * sqrt(150)/sqrt(600) + 0.5
-1.96 * sqrt(1/2400) + 0.5
1.96 * sqrt(1/2400) + 0.5
32.8/1.5
-32.8/466.4
data <- read.csv("~/Documents/problem4.csv", sep="")
View(data)
avg = mean(data$change)
s = sd(data$change)
avg/(s/sqrt(15))
t.test(data$change, alternative = 'greater')
-1.96 * sqrt(1/2400) + 0.5
1.96 * sqrt(1/2400) + 0.5
382/600
((382/600) - 0.5)/(sqrt(1/2400))
2 * pt(6.70, 599, lower = False)
2 * pt(6.70, 599, lower = FALSE)
(0.4599917 - 0.55)/(sqrt(1/2400))
?pnorm
(0.540008 - 0.55)/(sqrt(1/2400))
pnorm(-0.489506) - pnorm(-4.409488)
1-0.3122
install.packages('car')
library(car)
library(car)
str(Prestige)
summary(Prestige)
hist(income)
hist(Prestige$prestige)
plot(Prestige$income, Prestige$prestige)
model1 <- lm(prestige ~ income, data = Prestige)
model2 <- lm(prestige ~ education, data = Prestige)
model3 <- lm(prestige ~ income + education, data = Prestige)
Prestige$inc2 = Prestige$income * 2
model4 = lm(prestige ~ inc2, data = Prestige)
summary(model1)
summary(model2)
summary(model3)
summary(model4)
Prestige$inc2 = Prestige$income ** 2
model4 = lm(prestige ~ inc2, data = Prestige)
summmary(model4)
summary(model4)
head(Prestige)
plot(Prestige$inc2, Prestige$prestige)
Prestige$inc2 = Prestige$income * 2
plot(Prestige$inc2, Prestige$prestige)
model4 = lm(prestige ~ inc2, data = Prestige)
summary(model4)
plot(Prestige$income, Prestige$prestige)
plot(Prestige$education, Prestige$prestige)
plot(Prestige$income, Prestige$prestige)
Prestige$loginc = log(Prestige$income)
model5 = lm(prestige ~ loginc, data = Prestige)
summary(model5)
model5 = lm(prestige ~ loginc + education, data = Prestige)
summary(model5)
?ln
?log
-0.70 * log(0.7) - 0.3 * log(0.30)
-0.70 * log10(0.7) - 0.3 * log10(0.30)
-0.75 * log(0.75) - 0.25 * log(0.25)
-0.75 * log2(0.75) - 0.25 * log2(0.25)
-0.1 * log2(0.1) - 0.2 * log2(0.2) - 0.7 * log(0.7)
-0.1 * log2(1/0.1) - 0.2 * log2(1/0.2) - 0.7 * log(1/0.7)
-0.1 * log2(1/0.1) - 0.2 * log2(1/0.2) - 0.7 * log2(1/0.7)
-0.1 * log2(0.1) - 0.2 * log2(0.2) - 0.7 * log2(0.7)
?resid
as.integer(4.5)
as.integer(4.8)
round(4.5)
round(4.6)
round(4.9)
round(4.45)
(1-0.5)^2
(2 - .5 * 2)^2
(3 - .5 * 3)^2
.25 + 2.25 + 1
3.5/6
7/12
w = rnorm(500, 0, 1)
plot.ts(w)
plot.ts(w, main = "Simulated White Noise", col = "navy", ylab = "Simulated Values", xlab = "Simulated Time Period")
hist(w, main = "Simulated White Noise", col = "blue", xlab = "Simulated Values")
v = filter(w, sides = 2, rep(1/3, 3))
plot.ts(v, xlab = "Simulated Time Period", ylab = "Simulated Values", main = "Simulated Moving Average", col = "navy")
edit(w)
install.packages("asta")
install.packages("astsa")
library(astsa)
data()
str(EQ5)
load(EQ5)
install.packages("astsa")
library(astsa)
data()
str(EQ5)
hist(EQ5)
hist(EQ5, xlab = "EQ5 Observation")
plot(EQ5, type = "o", xlab = "Primary and Secondary Wave", ylab = "Seismic Trace", main = "Seismic Trace for Earthquake number 5", col = "blue")
str(flu)
hist(flu, xlab = "Monthly influenza/phuemonia deaths per 10,000 people", main = "Histogram of deaths per 10,000 people: 1968 - 1978")
plot(flu, type = "o", xlab = "Year", ylab = "Monthly deaths per 10,000 (US)", main = "Deaths per 10,000 people in US 1968-1978", col = "red")
str(gas)
hist(gas, xlab = "Monthly New York Harbor gas spot price", main = "Histogram of NYH gas spot prices: 2000 - 2010")
plot(gas, type = "o", xlab = "Year: 2000 - 2010", ylab = "NYH gas weekly spot price", main = "NYH weekly gas spot price from 2000 - 2010")
d = rnorm(1000, 0, 1) #draw from a standard normal distribution
hist(d, xlab = "Observed value of White Noise", main = "Histogram of Simulated White Noise")
plot.ts(d, xlab = "Simulated Time Period", ylab = "Observed Value of White Noise", main = "Simulated White Noise Time Series", col = "navy")
gold_price <- read.csv("~/Downloads/GOLDAMGBD228NLBM.csv")
View(gold_price)
str(gold_price)
hist(gold_price, xlab = "Gold Fixing price US dollars", main = "Gold Fixing Price ($) in London Bullion Market from Jan 1, 2000 to Jan 1, 2015")
hist(gold_price$VALUE, xlab = "Gold Fixing price US dollars", main = "Gold Fixing Price ($) in London Bullion Market from Jan 1, 2000 to Jan 1, 2015")
gold_price$DATE <- as.Date(as.character(gold_price$DATE, format = "%Y%m%d"))
gold_price_ts <- xts(gold_price$VALUE, gold_price$DATE)
install.packages("xts")
gold_price$DATE <- as.Date(as.character(gold_price$DATE, format = "%Y%m%d")) #convert to a date
gold_price_ts <- xts(gold_price$VALUE, gold_price$DATE) #make a time series object
library(xts) #get requisite library
gold_price_ts <- xts(gold_price$VALUE, gold_price$DATE) #make a time series object
str(gold_price_ts)
gold_price_ts <- xts(as.numeric(gold_price$VALUE), gold_price$DATE) #make a time series object
hist(gold_price$VALUE, xlab = "Gold Fixing price US dollars", main = "Gold Fixing Price ($) in London Bullion Market from Jan 1, 2000 to Jan 1, 2015")
hist(gold_price_ts, xlab = "Gold Fixing price US dollars", main = "Gold Fixing Price ($) in London Bullion Market from Jan 1, 2000 to Jan 1, 2015")
head(gold_price_ts)
plot.ts(gold_price_ts, xlab = "Day from Jan 1, 2000 to Jan 1, 2015", ylab = "Gold Fixing Price ($)", main = "Gold Fixing Price in London Bullion Market (Jan 1, 2000 - Jan 1, 2015)")
rm(list = ls())
```{r}
library(xts) #get requisite library
gold_price <- read.csv("~/Downloads/GOLDAMGBD228NLBM.csv")
str(gold_price)
gold_price$DATE <- as.Date(as.character(gold_price$DATE, format = "%Y%m%d")) #convert to a date
gold_price_ts <- xts(as.numeric(gold_price$VALUE), gold_price$DATE) #make a time series object
hist(gold_price_ts, xlab = "Gold Fixing price US dollars", main = "Gold Fixing Price ($) in London Bullion Market from Jan 1, 2000 to Jan 1, 2015")
plot.ts(gold_price_ts, xlab = "Day from Jan 1, 2000 to Jan 1, 2015", ylab = "Gold Fixing Price ($)", main = "Gold Fixing Price in London Bullion Market (Jan 1, 2000 - Jan 1, 2015)")
gold_price$DATE <- as.Date(as.character(gold_price$DATE, format = "%Y%m%d")) #convert to a date
?as.Date
gold_price$DATE <- as.Date(as.character(gold_price$DATE, format = "%Y-%m-%d")) #convert to a date
gold_price <- read.csv("~/Downloads/GOLDAMGBD228NLBM.csv")
str(gold_price)
gold_price$DATE <- as.Date(as.character(gold_price$DATE, format = "%Y-%m-%d")) #convert to a date
gold_price_ts <- xts(as.numeric(gold_price$VALUE), gold_price$DATE) #make a time series object
hist(gold_price_ts, xlab = "Gold Fixing price US dollars", main = "Gold Fixing Price ($) in London Bullion Market from Jan 1, 2000 to Jan 1, 2015")
plot.ts(gold_price_ts, xlab = "Day from Jan 1, 2000 to Jan 1, 2015", ylab = "Gold Fixing Price ($)", main = "Gold Fixing Price in London Bullion Market (Jan 1, 2000 - Jan 1, 2015)")
```
rm(list = ls(
))
library(astsa)
d = rnorm(1000, 0, 1) #draw from a standard normal distribution
z1 <- d #use random noise from above
for(t in 2:length(d)) {
z1[t] <- 0.9 * z1[t - 1] + d[t]
}
hist(z1, xlab = "Simulated AR(1) Model values", main = "Histogram of 0.9 simulated AR(1)")
plot.ts(z1, xlab = "Simulated Time Period", ylab = "Simulated AR(1) Model Values", main = "Time Series Plot of 0.9 Simulated AR(1) Model", col = "blue")
hist(z2, xlab = "Simulated AR(1) Model values", main = "Histogram of 0.2 simulated AR(1)")
z2 <- d #use random noise from above
for(t in 2:length(d)) {
z2[t] <- 0.2 * z2[t - 1] + d[t]
}
hist(z2, xlab = "Simulated AR(1) Model values", main = "Histogram of 0.2 simulated AR(1)")
plot.ts(z2, xlab = "Simulated Time Period", ylab = "Simulated AR(1) Model Values", main = "Time Series Plot of 0.2 Simulated AR(1) Model", col = "blue")
?par
linDet <- 10 + 0.5 * length(d)
linDet <- 10 + 0.5 * (1:length(d))
rw1 <- cumsum(d)
rwd <- 0.5 + d
rw2 <- cumsum(rwd)
plot.ts(rw2, xlab = "Simulated Time Period", ylab = "Simulated Values", main = "Random Walk With and Without Drift and Linear Model Simulation", col = "blue")
lines(rw1, col = "purple")
lines(linDet, col = "green", lty = "dashed")
rands <- rnorm(500, 0, 1)
randWalk2 <- cumsum(rands)
summary(randWalk2)
sd(randWalk2)
mean()
mean(randWalk2)
str(randWalk)
str(randWalk2)
?plot
plot.ts(randWalk2)
plot.ts(randWalk2, xlab = "Simulated Time Period", ylab = "Simulated Random Walk Values", main = "Random Walk with No Drift Time Series", col = "blue")
?plot.ts
acf(randWalk2)
title("Correlogram for Random Walk with No Drift Model")
acf(randWalk2, main = "Correlogram for Random Walk with No Drift")
pacf(randWalk2, main = "Partial Autocorrelation for Random Walk with No Drift")
getwd()
?polyroot
polyroot(0.95)
polyroot(c(0.95))
polyroot(c(0.8, 0.3))
polyroot(c(1, 0.95))
polyroot(c(1, 0.8, 0.3))
polyroot(c(1, -0.5, 0.5))
polyroot(c(1, 1, 0.4))
polyroot(c(1, -0.5, -0.25))
getwd()
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
acf(x, main="")
acf(arfit$resid[3:100], main="Autocorrelation of Time Series Residuals")
arfit <- ar(x, method = "ols")
polyroot(arfit$ar)
arfit <- ar(x, method = "ols")
arfit
acf(arfit$resid[3:100], main="Autocorrelation of Time Series Residuals")
hist(arfit$resid)
plot.ts(arfit$resid, main="Simulated Random Noise Time Series",col="blue", ylab="Values", xlab="Simulated Time Period")
qqPlot(arfit$resid, main="QQ Plot of Residuals", ylab="Residuals")
series ,- read.table("series.csv", quote = "\"", comment.car = "")
series= read.table("series.csv", quote = "\"", comment.car = "")
series <- read.table("~/Documents/Lab2/series.csv", quote="\"", comment.char="")
ind = seq(from = 1, to = 75)
df = data.frame(ind,series)
arfit <- ar(df$V1, method = "ols")
arfit$asy.var
arfit <- ar(df$V1, method = "yw")
arfit$asy.var
arfit <- ar(df$V1, method = "mle")
ts = ggplot(df, aes(x=ind, y=V1)) + geom_line() + ggtitle("Time Series")+ scale_x_continuous("Series") + scale_y_continuous("Value")
library(ggplot)
library(ggplot2)
ts = ggplot(df, aes(x=ind, y=V1)) + geom_line() + ggtitle("Time Series")+ scale_x_continuous("Series") + scale_y_continuous("Value")
ts
arfit$asy.var.coef
arfit$asy.var
arfit <- ar(df$V1, method = "ols")
arfit$asy.var.coef
arfit$asy.var.se
arfit$asy.se
arfit <- ar(df$V1, method = "mle")
arfit$asy.se
arfit$asy.var.coef
arfit
sqrt(arfit$asy.var)
arfit <- ar(df$V1, method = "yw")
sqrt(arfit$asy.var)
arfit$asy.var[1,2]
arfit <- ar(df$V1, method = "mle")
arfit$asy.var[1,2]
arfit$asy.var
arfit$asy.var[2,2]
set.seed(898)
x3 <- arima.sim(n = 1000, list(ar = c(1.5, -.9), ma=0))
x3.arfit <- ar(x3, method = "mle") #AR estimates a series of AR models up to order 12 (by default)
x3.arfit$aic   # AICs of the fit models
sqrt(x3.arfit$asy.var) # asy. standard error
set.seed(898)
x3 <- arima.sim(n = 1000, list(ar = c(1.5, -.9), ma=0))
x3.arfit <- ar(x3, method = "mle") #AR estimates a series of AR models up to order 12 (by default)
sqrt(x3.arfit$asy.var) # asy. standard error
x3.arfit$asy.var
x3.arfit$ar + c(-2,2)*sqrt(x3.arfit$asy.var)
library(astsa)    # Time series package by Shummway and Stoffer
library(zoo)      # time series package
library(forecast)
library(quantmod) # Financial time series package
install.packages("quantmod")
library(quantmod)
theta = seq(-2,2,0.01)
rho = theta/(1+theta^2)
plot(theta, rho, xlab=expression(~~~theta),
ylab=expression(~~~theta/(1+theta^2)),
main = "Theoretical ACF of MA(1)")
set.seed(898)
ma1a <- arima.sim(list(order=c(0,0,1), ma=.9), n=100)
set.seed(898)
ma1b <- arima.sim(list(order=c(0,0,1), ma=-.9), n=100)
set.seed(898)
ma1c <- arima.sim(list(order=c(0,0,1), ma=.5), n=100)
set.seed(898)
ma1d <- arima.sim(list(order=c(0,0,1), ma=-.5), n=100)
str(ma1a)
hist(ma1a, ylab="value", main=(expression(MA(1)~~~theta==+.9)))
hist(ma1b, ylab="x", main=(expression(MA(1)~~~theta==-.9)))
hist(ma1c, ylab="x", main=(expression(MA(1)~~~theta==+.5)))
hist(ma1d, ylab="x", main=(expression(MA(1)~~~theta==-.5)))
plot(ma1a, ylab="value", main=(expression(MA(1)~~~theta==+.9)))
plot(ma1b, ylab="x", main=(expression(MA(1)~~~theta==-.9)))
plot(ma1c, ylab="x", main=(expression(MA(1)~~~theta==+.5)))
plot(ma1d, ylab="x", main=(expression(MA(1)~~~theta==-.5)))
par(mfrow(c(2,2)))
par(mfrow=c(2,2))
acf(ma1a,main="Fig1: ACF of MA1(ma=0.9)")
acf(ma1b,main="Fig2: ACF of MA1(ma=-0.9)")
acf(ma1c,main="Fig3: ACF of MA1(ma=0.5)")
acf(ma1d,main="Fig4: ACF of MA1(ma=-0.5)")
par(mfrow=c(2,2))
pacf(ma1a,main="Fig1: PACF of MA1(ma=0.9)")
pacf(ma1b,main="Fig2: PACF of MA1(ma=-0.9)")
pacf(ma1c,main="Fig3: PACF of MA1(ma=0.5)")
pacf(ma1d,main="Fig4: PACF of MA1(ma=-0.5)")
rm(list = ls())
set.seed(898)
ma2a1 <- arima.sim(list(order=c(0,0,2), ma=c(0.9,  0.4)), n=100)
set.seed(898)
ma2a2 <- arima.sim(list(order=c(0,0,2), ma=c(0.9, -0.4)), n=100)
set.seed(898)
ma2b1 <- arima.sim(list(order=c(0,0,2), ma=c(-.9, 0.4)), n=100)
set.seed(898)
ma2b2 <- arima.sim(list(order=c(0,0,2), ma=c(-.9, -0.4)), n=100)
set.seed(898)
ma2c1 <- arima.sim(list(order=c(0,0,2), ma=c(0.5, 0.4)), n=100)
set.seed(898)
ma2c2 <- arima.sim(list(order=c(0,0,2), ma=c(0.5, -0.4)), n=100)
set.seed(898)
ma2d1 <- arima.sim(list(order=c(0,0,2), ma=c(-0.5, 0.4)), n=100)
set.seed(898)
ma2d2 <- arima.sim(list(order=c(0,0,2), ma=c(-0.5, -0.4)), n=100)
?arima.sim
par(mfrow = c(2,2))
plot(ma2a1, ylab="simulated value", main="MA2(0.9, 0,4)")
plot(ma2a2, ylab="simulated value", main="MA2(0.9,-0.4)")
plot(ma2b1, ylab="simulated value", main="MA2(-0.9,0.4)")
plot(ma2b2, ylab="simulated value", main="MA2(-0.9,-0.4)")
par(mfrow=c(3,2))
plot(ma1a,  ylab="simulated value", main=(expression(MA(1)~~~theta==+.9)))
acf(ma1a,  ylab="Autocorrelation", main="ACF of MA1(0.9)")
plot(ma2a1, ylab="simulated value", main="MA2(0.9, 0,4)")
acf(ma2a1, ylab="Autocorrelation", main="ACF of MA2(0.9, 0,4)")
plot(ma2a2, ylab="simulated value", main="MA2(0.9,-0.4)")
acf(ma2a2, ylab="Autocorrelation value", main="ACF MA2(0.9,-0.4)")
par(mfrow=c(2,2))
plot(ma2c2, ylab="simulated value", main="MA2(0.5,-0.4)")
hist(ma2c2, col="grey", ylab="simulated value", main="MA2(0.5,-0.4)")
acf(ma2c2, ylab="simulated value", main="MA2(0.5,-0.4)")
pacf(ma2c2, ylab="simulated value", main="MA2(0.5,-0.4)")
rm(list = ls())
ma2.fit <- arima(ma2c2, order=c(0,0,2))
set.seed(898)
ma2c2 <- arima.sim(list(order=c(0,0,2), ma=c(0.5, -0.4)), n=100)
ma2.fit <- arima(ma2c2, order=c(0,0,2))
summary(ma2.fit)
head(cbind(ma2c2, fitted(ma2.fit), ma2.fit$resid),10)
df<-data.frame(cbind(ma2c2, fitted(ma2.fit), ma2.fit$resid))
library(stargazer)
stargazer(df, type="text")
summary(ma2.fit$resid)
par(mfrow=c(2,2))
plot.ts(ma2.fit$resid, main="Residual Series",
ylab="residuals", col="navy")
hist(ma2.fit$resid, col="gray", main="Residuals")
acf(ma2.fit$resid, main="ACF of Residuals")
pacf(ma2.fit$resid, main="PACF of Residuals")
Box.test(ma2.fit$resid, type="Ljung-Box") # Box-Pierce test
setwd("Documents/Lab2")
library(ggplot2)
library(gridExtra)
library(grid)
library(car)
series <- read.table("series.csv", quote = "\"", comment.char = "")
ind = seq(from = 1, to = 75)
df = data.frame(ind,series)
ts = ggplot(df, aes(x=ind, y=V1)) + geom_line() + ggtitle("Time Series")+ scale_x_continuous("Series") + scale_y_continuous("Value")
ts
series2 <- read.csv("series.csv")
head(series2)
plot.ts(series2$X10.01)
arfit <- ar(df$V1, method = "mle")
sqrt(arfit$asy.var)
diag(sqrt(arfit$asy.var))
x <- diag(sqrt(arfit$asy.var))
arfit
x
arfit <- ar(df$V1, method = "ols")
diag(sqrt(arfit$asy.var))
arfit$asy.var
arfit$asy.se
arfti
arfit
arfit$asy.se
arfit$asy.se$ar
arfit <- ar(df$V1, method = "yw")
arfit$asy.var
diag(sqrt(arfit$asy.var))
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
#Autocorrelation Function
acf(x, main="")
title("Autocorrelation of Time Series")
#Partial Autocorrelation Function
pacf(x, main="")
title("Partial Autocorrelation of Time Series")
arfit <- ar(x, method = "ols")
arfit$asy.se.coef
arfit
?arfit
?ar
polyroot(arfit$ar)
arfit$order
arfit$ar
polyroot(c(arfit$ar))
